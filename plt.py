#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""

@author: Rogerio Shieh Barbosa

"""

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

class Plot:

	def __init__(self, splits, nb, k1, k5):

		self.splits = splits
		self.nb = nb
		self.k1 = k1
		self.k5 = k5

	def plot(self, nb, l1, l2, l_inf, k, method, output_name): #List(float) --> None
		
		plt.plot(self.splits, nb, 'r--', 
			self.splits, l1, 'b--', 
			self.splits, l2, 'c--', 
			self.splits, l_inf, 'm--',
			)

		NB_patch = mpatches.Patch(color='red', label='NB')
		NN1_patch = mpatches.Patch(color='blue', label='NN (L-1)')
		NN2_patch = mpatches.Patch(color='c', label='NN (L-2)')
		NN_INF_patch = mpatches.Patch(color='m', label='NN (L-inf)')

		plt.legend(handles=[NB_patch, NN1_patch, NN2_patch, NN_INF_patch])

		plt.title('{} Scores, k = {}'.format(method, k))

		plt.ylabel('{} score'.format(method))
		plt.xlabel('Training data split')
		plt.axis([0.9, 0.6, 50, 100])
		plt.xticks([0.9, 0.8, 0.7, 0.6])
		
		plt.savefig(output_name)
		plt.clf()

	def plot1(self):
		'''
		Returns accuracies for plotting results for NB and KNN (k=1).
		'''

		nb_k1 = [x[2] * 100 for x in self.nb]	
		l1_acc_k1 = [x[0][2] * 100 for x in self.k1]
		l2_acc_k1 = [x[1][2] * 100 for x in self.k1]
		l_inf_acc_k1 = [x[2][2] * 100 for x in self.k1]

		return nb_k1, l1_acc_k1, l2_acc_k1, l_inf_acc_k1

	def plot3(self):
		'''
		Returns accuracies for plotting results for NB and KNN (k=5).
		'''

		nb_k5 = [x[2] * 100 for x in self.nb]
		l1_acc_k5 = [x[0][2] * 100 for x in self.k5]
		l2_acc_k5 = [x[1][2] * 100 for x in self.k5]
		l_inf_acc_k5 = [x[2][2] * 100 for x in self.k5]

		return nb_k5, l1_acc_k5, l2_acc_k5, l_inf_acc_k5

	def plot2(self):
		'''
		Returns F1-scores for plotting results for NB and KNN (k=1).
		'''

		nb_f1 = [x[5] * 100 for x in self.nb]
		l1_f1_k1 = [x[0][5] * 100 for x in self.k1]
		l2_f1_k1 = [x[1][5] * 100 for x in self.k1]
		l_inf_f1_k1 = [x[2][5] * 100 for x in self.k1]

		return nb_f1, l1_f1_k1, l2_f1_k1, l_inf_f1_k1

	def plot4(self):
		'''
		Returns F1-scores for plotting results for NB and KNN (k=5).
		'''
		nb_f1 = [x[5] * 100 for x in self.nb]
		l1_f1_k5 = [x[0][5] * 100 for x in self.k5]
		l2_f1_k5 = [x[1][5] * 100 for x in self.k5]
		l_inf_f1_k5 = [x[2][5] * 100 for x in self.k5]

		return nb_f1, l1_f1_k5, l2_f1_k5, l_inf_f1_k5

	def plot_all(self):

		nb, l1, l2, l_inf = self.plot1()
		self.plot(nb, l1, l2, l_inf, 1, "Accuracy", "1")

		nb, l1, l2, l_inf = self.plot2()
		self.plot(nb, l1, l2, l_inf, 1, "F-1", "2")

		nb, l1, l2, l_inf = self.plot3()
		self.plot(nb, l1, l2, l_inf, 5, "Accuracy", "3")

		nb, l1, l2, l_inf = self.plot4()
		self.plot(nb, l1, l2, l_inf, 5, "F-1", "4")

if __name__ == '__main__':

	splits = [.9, .8, .7, .6]

	nb = [ [4655,4165, 0.8947368421052632, 0.9806259314456036, 0.7393258426966293, 0.8430493273542601],
	[4138, 3287, 0.7943450942484291, 0.9891576313594662, 0.5859683794466403, 0.73596028544834],
	[3621,3461,0.9558133112399889,0.9213806327900288,0.9249278152069298,0.9231508165225744],
	[3104, 2782, 0.8962628865979382, 0.6555183946488294, 0.978369384359401, 0.7850467289719626]
	]

	k1 = [ 
		[	
			[4655, 2900, 0.6229860365198711, 0.9985315712187959, 0.4368776100224864, 0.6078212290502794],
			[4655, 3666, 0.7875402792696026, 0.9412628487518355, 0.5851209493382017, 0.7216436813960033],
			[4655, 3437, 0.7383458646616541, 0.908957415565345, 0.5308747855917667, 0.6702761234434217]
		],	
			
		[
			[4138, 3130, 0.7564040599323345, 0.9161129568106312, 0.5487562189054727, 0.686372121966397],
			[4138, 3503, 0.846544224262929, 0.904485049833887, 0.6768178993163455, 0.7742623533594026],
			[4138, 3323, 0.8030449492508458, 0.43106312292358806, 0.7996918335901386, 0.5601726929303832]
		],

		[
			[3621, 2673, 0.7381938690969345, 0.9848053181386515, 0.526663280853225, 0.686300463269358],
			[3621, 3079, 0.8503175918254626, 0.912630579297246, 0.6810772501771793, 0.7800324675324676],
			[3621, 2911, 0.803921568627451, 0.9344729344729344, 0.6055384615384616, 0.7348767737117253]

		],
		[
			[3104, 2330, 0.7506443298969072, 0.9933407325194229, 0.5381840048105833, 0.6981279251170047],
			[3104, 2674, 0.8614690721649485, 0.9611542730299667, 0.6867565424266455, 0.8011100832562442],
			[3104, 2632, 0.8479381443298969, 0.7602663706992231, 0.7279489904357067, 0.743756786102063]
		]
	]

	k5 = [ 
		[	
			[4655, 2900, 0.6229860365198711, 0.9985315712187959, 0.4368776100224864, 0.6078212290502794],
			[4655, 3666, 0.7875402792696026, 0.9412628487518355, 0.5851209493382017, 0.7216436813960033],
			[4655, 3437, 0.7383458646616541, 0.908957415565345, 0.5308747855917667, 0.6702761234434217]
		],	
			
		[
			[4138, 3130, 0.7564040599323345, 0.9161129568106312, 0.5487562189054727, 0.686372121966397],
			[4138, 3503, 0.846544224262929, 0.904485049833887, 0.6768178993163455, 0.7742623533594026],
			[4138, 3323, 0.8030449492508458, 0.43106312292358806, 0.7996918335901386, 0.5601726929303832]
		],

		[
			[3621, 2673, 0.7381938690969345, 0.9848053181386515, 0.526663280853225, 0.686300463269358],
			[3621, 3079, 0.8503175918254626, 0.912630579297246, 0.6810772501771793, 0.7800324675324676],
			[3621, 2911, 0.803921568627451, 0.9344729344729344, 0.6055384615384616, 0.7348767737117253]

		],
		[
			[3104, 2330, 0.7506443298969072, 0.9933407325194229, 0.5381840048105833, 0.6981279251170047],
			[3104, 2674, 0.8614690721649485, 0.9611542730299667, 0.6867565424266455, 0.8011100832562442],
			[3104, 2632, 0.8479381443298969, 0.7602663706992231, 0.7279489904357067, 0.743756786102063]
		]
	]

	plotting = Plot(splits, nb, k1, k5)
	plotting.plot_all()